// Code generated by goa v3.12.4, DO NOT EDIT.
//
// servers endpoints
//
// Command:
// $ goa gen
// github.com/dipankardas011/crop-yield-monitor/src/authentication/design

package servers

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "servers" service endpoints.
type Endpoints struct {
	Login     goa.Endpoint
	Signup    goa.Endpoint
	GetHealth goa.Endpoint
}

// NewEndpoints wraps the methods of the "servers" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Login:     NewLoginEndpoint(s),
		Signup:    NewSignupEndpoint(s),
		GetHealth: NewGetHealthEndpoint(s),
	}
}

// Use applies the given middleware to all the "servers" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Login = m(e.Login)
	e.Signup = m(e.Signup)
	e.GetHealth = m(e.GetHealth)
}

// NewLoginEndpoint returns an endpoint function that calls the method "login"
// of service "servers".
func NewLoginEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*Request)
		return s.Login(ctx, p)
	}
}

// NewSignupEndpoint returns an endpoint function that calls the method
// "signup" of service "servers".
func NewSignupEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*SignUp)
		return s.Signup(ctx, p)
	}
}

// NewGetHealthEndpoint returns an endpoint function that calls the method "get
// health" of service "servers".
func NewGetHealthEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return s.GetHealth(ctx)
	}
}

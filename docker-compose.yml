services:
  # Databases
  auth-db:
    image: auth-db
    networks:
    - crop-yield
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  image-db:
    image: image-db
    networks:
    - crop-yield
    healthcheck:
      test: ["CMD", "redis-cli", "--user", "health", "--pass", "77777", "PING"]
      timeout: 20s
      retries: 10

  recommend-db:
    image: recommend-db
    networks:
    - crop-yield
    healthcheck:
      test: ["CMD", "redis-cli", "--user", "health", "--pass", "77777", "PING"]
      timeout: 20s
      retries: 10

  # backend servers
  auth:
    image: auth
    depends_on:
      auth-db:
        condition: service_healthy

    env_file:
      - .env-auth
    networks:
    - crop-yield

  image:
    image: image
    depends_on:
      image-db:
        condition: service_healthy
      auth-db:
        condition: service_healthy

    env_file:
      - .env-image
    networks:
    - crop-yield


  recommend:
    image: recommend
    depends_on:
      recommend-db:
        condition: service_healthy
      auth-db:
        condition: service_healthy
      image-db:
        condition: service_healthy

    env_file:
      - .env-recommend
    networks:
    - crop-yield

  lb-backend:
    image: lb-backend
    depends_on:
    - auth
    - image
    - recommend
    networks:
    - crop-yield
    ports:
      - "9090:80"

  # another one for the ml workload
  # todo

  # frontend server
  frontend:
    image: frontend
    depends_on:
      - lb-backend
    networks:
      - crop-yield
    ports:
      - "8080:3000"

# networks
networks:
  crop-yield: {}


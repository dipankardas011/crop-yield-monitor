// Code generated by goa v3.13.0, DO NOT EDIT.
//
// servers HTTP client CLI support package
//
// Command:
// $ goa gen github.com/dipankardas011/crop-yield-monitor/src/images/design

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"

	servers "github.com/dipankardas011/crop-yield-monitor/src/images/gen/servers"
	goa "goa.design/goa/v3/pkg"
)

// BuildUploadPayload builds the payload for the servers upload endpoint from
// CLI flags.
func BuildUploadPayload(serversUploadBody string) (*servers.ReqUpload, error) {
	var err error
	var body UploadRequestBody
	{
		err = json.Unmarshal([]byte(serversUploadBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"image\": \"Q29uc2VxdWF0dXIgaGFydW0gZXQgZG9sb3IgcmVwZWxsZW5kdXMgZXhwbGljYWJvIGVpdXMu\",\n      \"uuid\": \"1\"\n   }'")
		}
		if body.Image == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("image", "body"))
		}
		if utf8.RuneCountInString(body.UUID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.uuid", body.UUID, utf8.RuneCountInString(body.UUID), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &servers.ReqUpload{
		UUID:  body.UUID,
		Image: body.Image,
	}

	return v, nil
}

// BuildFetchPayload builds the payload for the servers fetch endpoint from CLI
// flags.
func BuildFetchPayload(serversFetchBody string) (*servers.ReqGet, error) {
	var err error
	var body FetchRequestBody
	{
		err = json.Unmarshal([]byte(serversFetchBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"uuid\": \"1\"\n   }'")
		}
		if utf8.RuneCountInString(body.UUID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.uuid", body.UUID, utf8.RuneCountInString(body.UUID), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &servers.ReqGet{
		UUID: body.UUID,
	}

	return v, nil
}

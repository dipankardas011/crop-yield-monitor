// Code generated by goa v3.13.0, DO NOT EDIT.
//
// servers HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/dipankardas011/crop-yield-monitor/src/images/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	servers "github.com/dipankardas011/crop-yield-monitor/src/images/gen/servers"
	goahttp "goa.design/goa/v3/http"
)

// BuildUploadRequest instantiates a HTTP request object with method and path
// set to call the "servers" service "upload" endpoint
func (c *Client) BuildUploadRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UploadServersPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("servers", "upload", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUploadRequest returns an encoder for requests sent to the servers
// upload server.
func EncodeUploadRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*servers.ReqUpload)
		if !ok {
			return goahttp.ErrInvalidType("servers", "upload", "*servers.ReqUpload", v)
		}
		body := NewUploadRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("servers", "upload", err)
		}
		return nil
	}
}

// DecodeUploadResponse returns a decoder for responses returned by the servers
// upload endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeUploadResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UploadResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("servers", "upload", err)
			}
			err = ValidateUploadResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("servers", "upload", err)
			}
			res := NewUploadResponseOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("servers", "upload", resp.StatusCode, string(body))
		}
	}
}

// BuildFetchRequest instantiates a HTTP request object with method and path
// set to call the "servers" service "fetch" endpoint
func (c *Client) BuildFetchRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: FetchServersPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("servers", "fetch", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeFetchRequest returns an encoder for requests sent to the servers fetch
// server.
func EncodeFetchRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*servers.ReqGet)
		if !ok {
			return goahttp.ErrInvalidType("servers", "fetch", "*servers.ReqGet", v)
		}
		body := NewFetchRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("servers", "fetch", err)
		}
		return nil
	}
}

// DecodeFetchResponse returns a decoder for responses returned by the servers
// fetch endpoint. restoreBody controls whether the response body should be
// restored after having been read.
func DecodeFetchResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body FetchResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("servers", "fetch", err)
			}
			err = ValidateFetchResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("servers", "fetch", err)
			}
			res := NewFetchResponseOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("servers", "fetch", resp.StatusCode, string(body))
		}
	}
}

// BuildGetHealthRequest instantiates a HTTP request object with method and
// path set to call the "servers" service "get health" endpoint
func (c *Client) BuildGetHealthRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetHealthServersPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("servers", "get health", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetHealthResponse returns a decoder for responses returned by the
// servers get health endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeGetHealthResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetHealthResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("servers", "get health", err)
			}
			res := NewGetHealthHealthOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("servers", "get health", resp.StatusCode, string(body))
		}
	}
}

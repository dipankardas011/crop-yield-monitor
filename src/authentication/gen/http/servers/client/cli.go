// Code generated by goa v3.12.4, DO NOT EDIT.
//
// servers HTTP client CLI support package
//
// Command:
// $ goa gen
// github.com/dipankardas011/crop-yield-monitor/src/authentication/design

package client

import (
	"encoding/json"
	"fmt"
	"unicode/utf8"

	servers "github.com/dipankardas011/crop-yield-monitor/src/authentication/gen/servers"
	goa "goa.design/goa/v3/pkg"
)

// BuildLoginPayload builds the payload for the servers login endpoint from CLI
// flags.
func BuildLoginPayload(serversLoginBody string) (*servers.Request, error) {
	var err error
	var body LoginRequestBody
	{
		err = json.Unmarshal([]byte(serversLoginBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"password\": \"vtt\",\n      \"username\": \"jz4\"\n   }'")
		}
		if utf8.RuneCountInString(body.Username) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.username", body.Username, utf8.RuneCountInString(body.Username), 1, true))
		}
		if utf8.RuneCountInString(body.Password) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", body.Password, utf8.RuneCountInString(body.Password), 1, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &servers.Request{
		Username: body.Username,
		Password: body.Password,
	}

	return v, nil
}

// BuildSignupPayload builds the payload for the servers signup endpoint from
// CLI flags.
func BuildSignupPayload(serversSignupBody string) (*servers.SignUp, error) {
	var err error
	var body SignupRequestBody
	{
		err = json.Unmarshal([]byte(serversSignupBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"emailid\": \"Consequatur sit eligendi voluptate quod dolorem repellendus.\",\n      \"first\": \"Deserunt consequatur enim.\",\n      \"last\": \"Magnam deleniti.\",\n      \"password\": \"Omnis modi laboriosam corporis.\"\n   }'")
		}
	}
	v := &servers.SignUp{
		First:    body.First,
		Last:     body.Last,
		Password: body.Password,
		Emailid:  body.Emailid,
	}

	return v, nil
}

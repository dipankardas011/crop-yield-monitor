// Code generated by goa v3.12.4, DO NOT EDIT.
//
// servers HTTP server types
//
// Command:
// $ goa gen github.com/dipankardas011/crop-yield-monitor/src/predict/design

package server

import (
	"unicode/utf8"

	servers "github.com/dipankardas011/crop-yield-monitor/src/predict/gen/servers"
	goa "goa.design/goa/v3/pkg"
)

// PredictRequestBody is the type of the "servers" service "predict" endpoint
// HTTP request body.
type PredictRequestBody struct {
	// unique userid
	UUID *string `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
}

// PredictResponseBody is the type of the "servers" service "predict" endpoint
// HTTP response body.
type PredictResponseBody struct {
	// operation successful?
	OK bool `form:"ok" json:"ok" xml:"ok"`
	// processing in progress
	Waiting bool `form:"waiting" json:"waiting" xml:"waiting"`
	// error reason
	Error string `form:"error" json:"error" xml:"error"`
	// recommendations
	Recommendations *struct {
		// recommended crops
		Crops     []string `form:"crops" json:"crops" xml:"crops"`
		NeedWater *bool    `form:"need_water" json:"need_water" xml:"need_water"`
	} `form:"recommendations,omitempty" json:"recommendations,omitempty" xml:"recommendations,omitempty"`
}

// GetHealthResponseBody is the type of the "servers" service "get health"
// endpoint HTTP response body.
type GetHealthResponseBody struct {
	// message
	Msg *string `form:"msg,omitempty" json:"msg,omitempty" xml:"msg,omitempty"`
}

// NewPredictResponseBody builds the HTTP response body from the result of the
// "predict" endpoint of the "servers" service.
func NewPredictResponseBody(res *servers.Recommendations) *PredictResponseBody {
	body := &PredictResponseBody{
		OK:      res.OK,
		Waiting: res.Waiting,
		Error:   res.Error,
	}
	if res.Recommendations != nil {
		body.Recommendations = &struct {
			// recommended crops
			Crops     []string `form:"crops" json:"crops" xml:"crops"`
			NeedWater *bool    `form:"need_water" json:"need_water" xml:"need_water"`
		}{
			NeedWater: res.Recommendations.NeedWater,
		}
		if res.Recommendations.Crops != nil {
			body.Recommendations.Crops = make([]string, len(res.Recommendations.Crops))
			for i, val := range res.Recommendations.Crops {
				body.Recommendations.Crops[i] = val
			}
		}
	}
	return body
}

// NewGetHealthResponseBody builds the HTTP response body from the result of
// the "get health" endpoint of the "servers" service.
func NewGetHealthResponseBody(res *servers.Health) *GetHealthResponseBody {
	body := &GetHealthResponseBody{
		Msg: res.Msg,
	}
	return body
}

// NewPredictReqPrediction builds a servers service predict endpoint payload.
func NewPredictReqPrediction(body *PredictRequestBody) *servers.ReqPrediction {
	v := &servers.ReqPrediction{
		UUID: *body.UUID,
	}

	return v
}

// ValidatePredictRequestBody runs the validations defined on PredictRequestBody
func ValidatePredictRequestBody(body *PredictRequestBody) (err error) {
	if body.UUID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("uuid", "body"))
	}
	if body.UUID != nil {
		if utf8.RuneCountInString(*body.UUID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.uuid", *body.UUID, utf8.RuneCountInString(*body.UUID), 1, true))
		}
	}
	return
}

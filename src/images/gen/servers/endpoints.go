// Code generated by goa v3.12.4, DO NOT EDIT.
//
// servers endpoints
//
// Command:
// $ goa gen github.com/dipankardas011/crop-yield-monitor/src/images/design

package servers

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "servers" service endpoints.
type Endpoints struct {
	Upload    goa.Endpoint
	Fetch     goa.Endpoint
	GetHealth goa.Endpoint
}

// NewEndpoints wraps the methods of the "servers" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		Upload:    NewUploadEndpoint(s),
		Fetch:     NewFetchEndpoint(s),
		GetHealth: NewGetHealthEndpoint(s),
	}
}

// Use applies the given middleware to all the "servers" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.Upload = m(e.Upload)
	e.Fetch = m(e.Fetch)
	e.GetHealth = m(e.GetHealth)
}

// NewUploadEndpoint returns an endpoint function that calls the method
// "upload" of service "servers".
func NewUploadEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ReqUpload)
		return s.Upload(ctx, p)
	}
}

// NewFetchEndpoint returns an endpoint function that calls the method "fetch"
// of service "servers".
func NewFetchEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ReqGet)
		return s.Fetch(ctx, p)
	}
}

// NewGetHealthEndpoint returns an endpoint function that calls the method "get
// health" of service "servers".
func NewGetHealthEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		return s.GetHealth(ctx)
	}
}

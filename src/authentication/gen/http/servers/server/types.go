// Code generated by goa v3.12.4, DO NOT EDIT.
//
// servers HTTP server types
//
// Command:
// $ goa gen
// github.com/dipankardas011/crop-yield-monitor/src/authentication/design

package server

import (
	"unicode/utf8"

	servers "github.com/dipankardas011/crop-yield-monitor/src/authentication/gen/servers"
	goa "goa.design/goa/v3/pkg"
)

// LoginRequestBody is the type of the "servers" service "login" endpoint HTTP
// request body.
type LoginRequestBody struct {
	// Username
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// Password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
}

// SignupRequestBody is the type of the "servers" service "signup" endpoint
// HTTP request body.
type SignupRequestBody struct {
	// firstname
	First *string `form:"first,omitempty" json:"first,omitempty" xml:"first,omitempty"`
	// lastname
	Last *string `form:"last,omitempty" json:"last,omitempty" xml:"last,omitempty"`
	// password
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// email
	Emailid *string `form:"emailid,omitempty" json:"emailid,omitempty" xml:"emailid,omitempty"`
}

// LoginResponseBody is the type of the "servers" service "login" endpoint HTTP
// response body.
type LoginResponseBody struct {
	// operation successful?
	OK *bool `form:"ok,omitempty" json:"ok,omitempty" xml:"ok,omitempty"`
	// error reason
	Error *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// unique user identification
	UUID *string `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
}

// SignupResponseBody is the type of the "servers" service "signup" endpoint
// HTTP response body.
type SignupResponseBody struct {
	// operation successful?
	OK *bool `form:"ok,omitempty" json:"ok,omitempty" xml:"ok,omitempty"`
	// error reason
	Error *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// unique user identification
	UUID *string `form:"uuid,omitempty" json:"uuid,omitempty" xml:"uuid,omitempty"`
}

// GetHealthResponseBody is the type of the "servers" service "get health"
// endpoint HTTP response body.
type GetHealthResponseBody struct {
	// message
	Msg *string `form:"msg,omitempty" json:"msg,omitempty" xml:"msg,omitempty"`
}

// NewLoginResponseBody builds the HTTP response body from the result of the
// "login" endpoint of the "servers" service.
func NewLoginResponseBody(res *servers.Response) *LoginResponseBody {
	body := &LoginResponseBody{
		OK:    res.OK,
		Error: res.Error,
		UUID:  res.UUID,
	}
	return body
}

// NewSignupResponseBody builds the HTTP response body from the result of the
// "signup" endpoint of the "servers" service.
func NewSignupResponseBody(res *servers.Response) *SignupResponseBody {
	body := &SignupResponseBody{
		OK:    res.OK,
		Error: res.Error,
		UUID:  res.UUID,
	}
	return body
}

// NewGetHealthResponseBody builds the HTTP response body from the result of
// the "get health" endpoint of the "servers" service.
func NewGetHealthResponseBody(res *servers.Health) *GetHealthResponseBody {
	body := &GetHealthResponseBody{
		Msg: res.Msg,
	}
	return body
}

// NewLoginRequest builds a servers service login endpoint payload.
func NewLoginRequest(body *LoginRequestBody) *servers.Request {
	v := &servers.Request{
		Username: *body.Username,
		Password: *body.Password,
	}

	return v
}

// NewSignupSignUp builds a servers service signup endpoint payload.
func NewSignupSignUp(body *SignupRequestBody) *servers.SignUp {
	v := &servers.SignUp{
		First:    body.First,
		Last:     body.Last,
		Password: body.Password,
		Emailid:  body.Emailid,
	}

	return v
}

// ValidateLoginRequestBody runs the validations defined on LoginRequestBody
func ValidateLoginRequestBody(body *LoginRequestBody) (err error) {
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	if body.Username != nil {
		if utf8.RuneCountInString(*body.Username) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.username", *body.Username, utf8.RuneCountInString(*body.Username), 1, true))
		}
	}
	if body.Password != nil {
		if utf8.RuneCountInString(*body.Password) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", *body.Password, utf8.RuneCountInString(*body.Password), 1, true))
		}
	}
	return
}

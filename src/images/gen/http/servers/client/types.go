// Code generated by goa v3.12.4, DO NOT EDIT.
//
// servers HTTP client types
//
// Command:
// $ goa gen github.com/dipankardas011/crop-yield-monitor/src/images/design

package client

import (
	servers "github.com/dipankardas011/crop-yield-monitor/src/images/gen/servers"
	goa "goa.design/goa/v3/pkg"
)

// UploadRequestBody is the type of the "servers" service "upload" endpoint
// HTTP request body.
type UploadRequestBody struct {
	// unique userid
	UUID string `form:"uuid" json:"uuid" xml:"uuid"`
	// image in byte array
	Image []byte `form:"image" json:"image" xml:"image"`
}

// FetchRequestBody is the type of the "servers" service "fetch" endpoint HTTP
// request body.
type FetchRequestBody struct {
	// unique userid
	UUID string `form:"uuid" json:"uuid" xml:"uuid"`
}

// UploadResponseBody is the type of the "servers" service "upload" endpoint
// HTTP response body.
type UploadResponseBody struct {
	// operation successful?
	OK *bool `form:"ok,omitempty" json:"ok,omitempty" xml:"ok,omitempty"`
	// error reason
	Error *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// image in []byte
	Image []byte `form:"image,omitempty" json:"image,omitempty" xml:"image,omitempty"`
}

// FetchResponseBody is the type of the "servers" service "fetch" endpoint HTTP
// response body.
type FetchResponseBody struct {
	// operation successful?
	OK *bool `form:"ok,omitempty" json:"ok,omitempty" xml:"ok,omitempty"`
	// error reason
	Error *string `form:"error,omitempty" json:"error,omitempty" xml:"error,omitempty"`
	// image in []byte
	Image []byte `form:"image,omitempty" json:"image,omitempty" xml:"image,omitempty"`
}

// GetHealthResponseBody is the type of the "servers" service "get health"
// endpoint HTTP response body.
type GetHealthResponseBody struct {
	// message
	Msg *string `form:"msg,omitempty" json:"msg,omitempty" xml:"msg,omitempty"`
}

// NewUploadRequestBody builds the HTTP request body from the payload of the
// "upload" endpoint of the "servers" service.
func NewUploadRequestBody(p *servers.ReqUpload) *UploadRequestBody {
	body := &UploadRequestBody{
		UUID:  p.UUID,
		Image: p.Image,
	}
	return body
}

// NewFetchRequestBody builds the HTTP request body from the payload of the
// "fetch" endpoint of the "servers" service.
func NewFetchRequestBody(p *servers.ReqGet) *FetchRequestBody {
	body := &FetchRequestBody{
		UUID: p.UUID,
	}
	return body
}

// NewUploadResponseOK builds a "servers" service "upload" endpoint result from
// a HTTP "OK" response.
func NewUploadResponseOK(body *UploadResponseBody) *servers.Response {
	v := &servers.Response{
		OK:    *body.OK,
		Error: *body.Error,
		Image: body.Image,
	}

	return v
}

// NewFetchResponseOK builds a "servers" service "fetch" endpoint result from a
// HTTP "OK" response.
func NewFetchResponseOK(body *FetchResponseBody) *servers.Response {
	v := &servers.Response{
		OK:    *body.OK,
		Error: *body.Error,
		Image: body.Image,
	}

	return v
}

// NewGetHealthHealthOK builds a "servers" service "get health" endpoint result
// from a HTTP "OK" response.
func NewGetHealthHealthOK(body *GetHealthResponseBody) *servers.Health {
	v := &servers.Health{
		Msg: body.Msg,
	}

	return v
}

// ValidateUploadResponseBody runs the validations defined on UploadResponseBody
func ValidateUploadResponseBody(body *UploadResponseBody) (err error) {
	if body.OK == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ok", "body"))
	}
	if body.Error == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error", "body"))
	}
	return
}

// ValidateFetchResponseBody runs the validations defined on FetchResponseBody
func ValidateFetchResponseBody(body *FetchResponseBody) (err error) {
	if body.OK == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ok", "body"))
	}
	if body.Error == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("error", "body"))
	}
	return
}

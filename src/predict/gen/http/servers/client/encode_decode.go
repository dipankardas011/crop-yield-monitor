// Code generated by goa v3.12.4, DO NOT EDIT.
//
// servers HTTP client encoders and decoders
//
// Command:
// $ goa gen github.com/dipankardas011/crop-yield-monitor/src/predict/design

package client

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"

	servers "github.com/dipankardas011/crop-yield-monitor/src/predict/gen/servers"
	goahttp "goa.design/goa/v3/http"
)

// BuildPredictRequest instantiates a HTTP request object with method and path
// set to call the "servers" service "predict" endpoint
func (c *Client) BuildPredictRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: PredictServersPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("servers", "predict", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodePredictRequest returns an encoder for requests sent to the servers
// predict server.
func EncodePredictRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, any) error {
	return func(req *http.Request, v any) error {
		p, ok := v.(*servers.ReqPrediction)
		if !ok {
			return goahttp.ErrInvalidType("servers", "predict", "*servers.ReqPrediction", v)
		}
		body := NewPredictRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("servers", "predict", err)
		}
		return nil
	}
}

// DecodePredictResponse returns a decoder for responses returned by the
// servers predict endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodePredictResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body PredictResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("servers", "predict", err)
			}
			err = ValidatePredictResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("servers", "predict", err)
			}
			res := NewPredictRecommendationsOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("servers", "predict", resp.StatusCode, string(body))
		}
	}
}

// BuildGetHealthRequest instantiates a HTTP request object with method and
// path set to call the "servers" service "get health" endpoint
func (c *Client) BuildGetHealthRequest(ctx context.Context, v any) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetHealthServersPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("servers", "get health", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetHealthResponse returns a decoder for responses returned by the
// servers get health endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeGetHealthResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (any, error) {
	return func(resp *http.Response) (any, error) {
		if restoreBody {
			b, err := io.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = io.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = io.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetHealthResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("servers", "get health", err)
			}
			res := NewGetHealthHealthOK(&body)
			return res, nil
		default:
			body, _ := io.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("servers", "get health", resp.StatusCode, string(body))
		}
	}
}
